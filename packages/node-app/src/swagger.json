{
  "openapi": "3.0.0",
  "info": {
    "title": "Web 3.0 Roulette",
    "description": "Web 3.0 app to manage giveaways",
    "contact": {
      "name": "GitHub",
      "url": "https://github.com/runtimerevolution/web3-roulette"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local API"
    }
  ],
  "paths": {
    "/giveaways": {
      "get": {
        "tags": ["giveaways"],
        "description": "Get all giveaways",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Flag used to filter out active or archived giveaways.By default returns all of them"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GiveawayListItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      },
      "post": {
        "tags": ["giveaways"],
        "description": "[Admin only] Create new giveaway",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "required": true
                  },
                  "description": {
                    "type": "string",
                    "required": true
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "required": true
                  },
                  "endTime": {
                    "type": "string",
                    "format": "date-time",
                    "required": true
                  },
                  "numberOfWinners": {
                    "type": "number",
                    "required": true
                  },
                  "requirements": {
                    "$ref": "#/components/schemas/Requirements"
                  },
                  "prize": {
                    "type": "string",
                    "required": true
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "required": true
                  },
                  "rules": {
                    "type": "string"
                  },
                  "manual": {
                    "type": "boolean"
                  }
                },
                "encoding": {
                  "image": {
                    "contentType": ["image/png", "image/jpeg"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GiveawayItem"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/giveaways/{giveawayId}": {
      "get": {
        "tags": ["giveaways"],
        "description": "Get giveaway",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "giveawayId",
            "in": "query",
            "description": "ID of the giveaway",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GiveawayItem"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      },
      "put": {
        "tags": ["giveaways"],
        "description": "[Admin only] Update giveaway",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "giveawayId",
            "in": "query",
            "description": "ID of the giveaway",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "required": true
                  },
                  "description": {
                    "type": "string",
                    "required": true
                  },
                  "prize": {
                    "type": "string",
                    "required": true
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "required": true
                  },
                  "rules": {
                    "type": "string"
                  },
                  "manual": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GiveawayItem"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/giveaway/{giveawayId}/generate-winners": {
      "get": {
        "tags": ["giveaways"],
        "description": "[Admin only] Generate giveaway winners",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "giveawayId",
            "in": "query",
            "description": "ID of the giveaway",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/giveaways/{giveawayId}/participants": {
      "get": {
        "tags": ["giveaways"],
        "description": "Get giveaway participants",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "giveawayId",
            "in": "query",
            "description": "ID of the giveaway",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string",
                        "enum": ["pending", "confirmed", "rejected"]
                      },
                      "notified": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/giveaways/{giveawayId}/participants/{participantId}": {
      "put": {
        "tags": ["giveaways"],
        "description": "Update participant state",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "giveawayId",
            "in": "query",
            "description": "ID of the giveaway",
            "required": true
          },
          {
            "name": "participantId",
            "in": "query",
            "description": "ID of the participant",
            "required": true
          },
          {
            "name": "state",
            "in": "body",
            "description": "New state of the participant",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "message": "Participant updated successfully"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": ["locations"],
        "description": "Get all locations",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      },
      "post": {
        "tags": ["locations"],
        "description": "[Admin only] Create new location",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "name",
            "in": "body",
            "required": true
          },
          {
            "name": "latitude",
            "in": "body",
            "required": true
          },
          {
            "name": "longitude",
            "in": "body",
            "required": true
          },
          {
            "name": "radius",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationItem"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/locations/{locationId}": {
      "put": {
        "tags": ["locations"],
        "description": "[Admin only] Update location",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "description": "ID of the locatiton",
            "required": true
          },
          {
            "name": "name",
            "in": "body",
            "required": true
          },
          {
            "name": "latitude",
            "in": "body",
            "required": true
          },
          {
            "name": "longitude",
            "in": "body",
            "required": true
          },
          {
            "name": "radius",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationItem"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      },
      "delete": {
        "tags": ["locations"],
        "description": "[Admin only] Delete location",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "description": "ID of the locatiton",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Invalid Authentication"
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/authentication/user": {
      "get": {
        "tags": ["authentication"],
        "description": "Get current user",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": { "type": "string" },
                    "name": { "type": "string" },
                    "role": {
                      "type": "string",
                      "enum": ["user", "admin"]
                    },
                    "units": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": ["node", "rails", "python"]
                      }
                    },
                    "picture": { "type": "string" }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "Invalid or missing information"
          },
          "5XX": {
            "description": "Unexpected error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GiveawayListItem": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "startTime": { "type": "string", "format": "date-time" },
          "endTime": { "type": "string", "format": "date-time" },
          "requirements": { "$ref": "#/components/schemas/Requirements" },
          "prize": { "type": "string" },
          "image": { "type": "string" },
          "manual": { "type": "boolean" },
          "winners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" }
              }
            }
          },
          "stats": {
            "type": "object",
            "properties": {
              "nrConfirmedParticipants": { "type": "number" },
              "nrPendingParticipants": { "type": "number" }
            }
          },
          "isInvalid": { "type": "boolean" }
        }
      },
      "GiveawayItem": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "startTime": { "type": "string", "format": "date-time" },
          "endTime": { "type": "string", "format": "date-time" },
          "participants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" },
                "name": { "type": "string" },
                "state": {
                  "type": "string",
                  "enum": ["pending", "confirmed", "rejected"]
                },
                "notified": { "type": "boolean" }
              }
            }
          },
          "winners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": { "type": "string" }
              }
            }
          },
          "numberOfWinners": { "type": "number" },
          "requirements": { "$ref": "#/components/schemas/Requirements" },
          "prize": { "type": "string" },
          "image": { "type": "string" },
          "manual": { "type": "boolean" }
        }
      },
      "Requirements": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": ["node", "rails", "python"]
          },
          "location": { "type": "string" }
        }
      },
      "LocationItem": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "required": true },
          "latitude": { "type": "number", "required": true },
          "longitude": { "type": "number", "required": true },
          "radius": { "type": "number", "required": true }
        }
      }
    },
    "securitySchemes": {
      "googleOAuth": {
        "type": "oauth2",
        "description": "Use this to authenticate using Google OAuth and get the Bearer token",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/v2/auth",
            "tokenUrl": "https://oauth2.googleapis.com/token",
            "scopes": {
              "profile": "Use this scope to access user's basic profile info",
              "email": "Use this scope to access user's email address"
            }
          }
        }
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Use this to access all the private API endpoints"
      }
    }
  }
}
